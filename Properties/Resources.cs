using System;
using System.Drawing;
using System.IO;
using System.Collections.Generic;
using System.Reflection;

namespace BonsaiGotchi.Properties
{
    /// <summary>
    /// Resource manager for BonsaiGotchi application.
    /// In a real project, this would be generated by Visual Studio.
    /// This implementation simulates the resource management system.
    /// </summary>
    internal static class Resources
    {
        // Cache for generated resources
        private static readonly Dictionary<string, object> ResourceCache = new Dictionary<string, object>();

        // Application icon
        public static Icon BonsaiIcon
        {
            get
            {
                if (ResourceCache.TryGetValue("BonsaiIcon", out object cachedIcon))
                    return (Icon)cachedIcon;

                // Try to load from file if exists, otherwise use system icon
                string iconPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Resources", "bonsai_icon.ico");
                Icon icon;
                
                if (File.Exists(iconPath))
                {
                    icon = new Icon(iconPath);
                }
                else
                {
                    // Fallback to system icon
                    icon = SystemIcons.Application;
                }

                ResourceCache["BonsaiIcon"] = icon;
                return icon;
            }
        }

        // Weather icons
        public static Image SunnyIcon => GetImageResource("weather_sunny.png", SystemIcons.Information.ToBitmap());
        public static Image CloudyIcon => GetImageResource("weather_cloudy.png", SystemIcons.Information.ToBitmap());
        public static Image RainIcon => GetImageResource("weather_rain.png", SystemIcons.Information.ToBitmap());
        public static Image SnowIcon => GetImageResource("weather_snow.png", SystemIcons.Information.ToBitmap());
        public static Image WindIcon => GetImageResource("weather_wind.png", SystemIcons.Information.ToBitmap());
        public static Image StormIcon => GetImageResource("weather_storm.png", SystemIcons.Exclamation.ToBitmap());
        public static Image HumidIcon => GetImageResource("weather_humid.png", SystemIcons.Information.ToBitmap());

        // Season icons
        public static Image SpringIcon => GetImageResource("season_spring.png", CreateColorSquare(Color.LightGreen));
        public static Image SummerIcon => GetImageResource("season_summer.png", CreateColorSquare(Color.ForestGreen));
        public static Image AutumnIcon => GetImageResource("season_autumn.png", CreateColorSquare(Color.Orange));
        public static Image WinterIcon => GetImageResource("season_winter.png", CreateColorSquare(Color.LightBlue));

        // Time of day icons
        public static Image MorningIcon => GetImageResource("time_morning.png", CreateColorSquare(Color.LightYellow));
        public static Image DayIcon => GetImageResource("time_day.png", CreateColorSquare(Color.Yellow));
        public static Image EveningIcon => GetImageResource("time_evening.png", CreateColorSquare(Color.Orange));
        public static Image NightIcon => GetImageResource("time_night.png", CreateColorSquare(Color.MidnightBlue));

        // Mini-game assets
        public static Image LeafCountingIcon => GetImageResource("game_leafcounting.png", SystemIcons.Information.ToBitmap());
        public static Image PestRemovalIcon => GetImageResource("game_pestremoval.png", SystemIcons.Shield.ToBitmap());
        public static Image PruningPuzzleIcon => GetImageResource("game_pruningpuzzle.png", SystemIcons.Application.ToBitmap());
        public static Image SeasonalCareIcon => GetImageResource("game_seasonalcare.png", SystemIcons.Information.ToBitmap());

        // Care activity icons
        public static Image WateringIcon => GetImageResource("care_watering.png", CreateColorSquare(Color.LightBlue));
        public static Image FeedingIcon => GetImageResource("care_feeding.png", CreateColorSquare(Color.LightGreen));
        public static Image PruningIcon => GetImageResource("care_pruning.png", CreateColorSquare(Color.Brown));
        public static Image RepottingIcon => GetImageResource("care_repotting.png", CreateColorSquare(Color.SaddleBrown));

        // Seed and breeding icons
        public static Image SeedIcon => GetImageResource("breeding_seed.png", SystemIcons.Information.ToBitmap());
        public static Image PollenizerIcon => GetImageResource("breeding_pollenizer.png", SystemIcons.Information.ToBitmap());
        
        // Status icons
        public static Image HealthIcon => GetImageResource("status_health.png", CreateColorSquare(Color.Red));
        public static Image HappinessIcon => GetImageResource("status_happiness.png", CreateColorSquare(Color.Green));
        public static Image HungerIcon => GetImageResource("status_hunger.png", CreateColorSquare(Color.Orange));
        public static Image StressIcon => GetImageResource("status_stress.png", CreateColorSquare(Color.Purple));
        public static Image PestIcon => GetImageResource("status_pest.png", CreateColorSquare(Color.Olive));
        public static Image DiseaseIcon => GetImageResource("status_disease.png", CreateColorSquare(Color.Maroon));

        // Helper methods
        private static Image GetImageResource(string resourceName, Image fallbackImage)
        {
            if (ResourceCache.TryGetValue(resourceName, out object cachedImage))
                return (Image)cachedImage;

            // Try to load from file if exists, otherwise use fallback
            string imagePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Resources", resourceName);
            Image image;
            
            if (File.Exists(imagePath))
            {
                try
                {
                    image = Image.FromFile(imagePath);
                }
                catch
                {
                    // If loading fails, use fallback
                    image = fallbackImage;
                }
            }
            else
            {
                // Try to load from embedded resources (if any)
                try
                {
                    Assembly assembly = Assembly.GetExecutingAssembly();
                    string embeddedResourcePath = $"BonsaiGotchi.Resources.{resourceName}";
                    
                    using (Stream stream = assembly.GetManifestResourceStream(embeddedResourcePath))
                    {
                        if (stream != null)
                        {
                            image = Image.FromStream(stream);
                        }
                        else
                        {
                            image = fallbackImage;
                        }
                    }
                }
                catch
                {
                    // If all loading fails, use fallback
                    image = fallbackImage;
                }
            }

            ResourceCache[resourceName] = image;
            return image;
        }

        /// <summary>
        /// Creates a simple colored square as a placeholder graphic
        /// </summary>
        private static Bitmap CreateColorSquare(Color color)
        {
            Bitmap bitmap = new Bitmap(32, 32);
            using (Graphics g = Graphics.FromImage(bitmap))
            {
                g.Clear(color);
                using (Pen pen = new Pen(Color.Black))
                {
                    g.DrawRectangle(pen, 0, 0, 31, 31);
                }
            }
            return bitmap;
        }

        /// <summary>
        /// Cleanly dispose of all cached resources when the application exits
        /// </summary>
        public static void CleanupResources()
        {
            foreach (var resource in ResourceCache.Values)
            {
                if (resource is IDisposable disposable)
                {
                    try
                    {
                        disposable.Dispose();
                    }
                    catch
                    {
                        // Ignore disposal errors
                    }
                }
            }
            
            ResourceCache.Clear();
        }
    }
}